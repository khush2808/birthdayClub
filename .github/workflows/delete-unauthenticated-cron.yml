name: Daily Unauthenticated Users Cleanup

on:
  schedule:
    # Runs at 3:00 AM UTC = 8:30 AM IST daily (30 minutes before birthday emails)
    - cron: '0 3 * * *'
  workflow_dispatch: # Allows manual triggering for testing

jobs:
  cleanup-unauthenticated-users:
    runs-on: ubuntu-latest
    
    steps:
      - name: Cleanup Expired OTPs
        run: |
          echo "Cleaning up expired OTPs first..."
          
          # Validate the URL secret is set
          if [ -z "${{ secrets.VERCEL_APP_URL }}" ]; then
            echo "::error::VERCEL_APP_URL secret is not set"
            exit 1
          fi
          
          OTP_CLEANUP_URL="${{ secrets.VERCEL_APP_URL }}/api/cleanup-expired-otps"
          echo "OTP Cleanup URL: $OTP_CLEANUP_URL"
          
           # Clean up expired OTPs first
           otp_response=$(curl -s -L -w "%{http_code}" -X POST \
             "$OTP_CLEANUP_URL" \
             -H "Content-Type: application/json" \
             -H "x-api-key: ${{ secrets.API_KEY }}" \
             -H "User-Agent: GitHub-Actions-Cleanup-Cron/1.0" \
             --max-time 30 \
             --connect-timeout 10)
          
          otp_http_code="${otp_response: -3}"
          otp_body="${otp_response%???}"
          
          echo "OTP Cleanup HTTP Status: $otp_http_code"
          echo "OTP Cleanup Response: $otp_body"
          
          # Continue even if OTP cleanup fails (it's not critical)
          if [ "$otp_http_code" -ge 200 ] && [ "$otp_http_code" -lt 300 ]; then
            echo "::notice::Expired OTPs cleanup completed successfully (HTTP $otp_http_code)"
          else
            echo "::warning::OTP cleanup failed with status $otp_http_code, continuing with user cleanup"
          fi

      - name: Cleanup Unauthenticated Users
        run: |
          echo "Triggering unauthenticated users cleanup..."
          
          TARGET_URL="${{ secrets.VERCEL_APP_URL }}/api/delete-unauthenticated-users"
          echo "Target URL: $TARGET_URL"
          
           # Make the request with detailed curl options
           response=$(curl -s -L -w "%{http_code}" -X POST \
             "$TARGET_URL" \
             -H "Content-Type: application/json" \
             -H "x-api-key: ${{ secrets.API_KEY }}" \
             -H "User-Agent: GitHub-Actions-Cleanup-Cron/1.0" \
             --max-time 30 \
             --connect-timeout 10)
          
          http_code="${response: -3}"
          body="${response%???}"
          
          echo "HTTP Status: $http_code"
          echo "Response Body: $body"
          
          # Check for successful responses (200-299)
          if [ "$http_code" -ge 200 ] && [ "$http_code" -lt 300 ]; then
            echo "::notice::Unauthenticated users cleanup completed successfully (HTTP $http_code)"
          else
            echo "::error::Cleanup trigger failed with status $http_code"
            echo "::error::Response body: $body"
            
            # Provide specific error context for common issues
            case "$http_code" in
              308|301|302|307)
                echo "::error::Redirect detected. Check if VERCEL_APP_URL has correct protocol (https://) and no trailing slash"
                ;;
              401)
                echo "::error::Unauthorized. Check if API_KEY secret is set correctly"
                ;;
              404)
                echo "::error::API endpoint not found. Verify the deployment and API route exists"
                ;;
              500|502|503|504)
                echo "::error::Server error. Check Vercel deployment logs and database connectivity"
                ;;
              000)
                echo "::error::Network error. Could not connect to the server"
                ;;
            esac
            
            exit 1
          fi

      - name: Log completion
        run: |
          echo "Complete cleanup cron job finished at $(date)"
          echo "Operations performed:"
          echo "1. Expired OTPs cleanup"
          echo "2. Unauthenticated users cleanup"